# Form implementation generated from reading ui file 'CalcUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import re
from PyQt6.QtCore import QRegularExpression
from PyQt6.QtGui import QRegularExpressionValidator

class InvalidExpressionError(Exception):
    pass

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Calculator")
        Form.resize(390, 342)
        self.calc_input = QtWidgets.QLineEdit(parent=Form)
        self.calc_input.setGeometry(QtCore.QRect(20, 10, 271, 31))
        self.calc_input.setObjectName("calc_input")
        reg_ex = QtCore.QRegularExpression(r"^[0-9+\-*/^()]*$")
        input_validator = QRegularExpressionValidator(reg_ex, self.calc_input)
        self.calc_input.setValidator(input_validator)
        self.calc_input.returnPressed.connect(lambda: self.btn_Press("="))
        self.pushButtonDel = QtWidgets.QPushButton(parent=Form)
        self.pushButtonDel.setGeometry(QtCore.QRect(20, 280, 131, 50))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonDel.setFont(font)
        self.pushButtonDel.setObjectName("pushButtonDel")
        self.pushButtonDel.clicked.connect(lambda: self.btn_Press("DEL"))
        self.lcdNumber = QtWidgets.QLCDNumber(parent=Form)
        self.lcdNumber.setGeometry(QtCore.QRect(310, 10, 64, 23))
        self.lcdNumber.setObjectName("lcdNumber")
        self.lcdNumber.setStyleSheet("""QLCDNumber { 
                                                    background-color: blue; 
                                                    color: white; }""")
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(20, 150, 322, 128))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButtonPlus = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonPlus.setFont(font)
        self.pushButtonPlus.setObjectName("pushButtonPlus")
        self.pushButtonPlus.clicked.connect(lambda: self.btn_Press("+"))
        self.horizontalLayout.addWidget(self.pushButtonPlus)
        self.pushButtonMinus = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonMinus.setFont(font)
        self.pushButtonMinus.setObjectName("pushButtonMinus")
        self.pushButtonMinus.clicked.connect(lambda: self.btn_Press("-"))
        self.horizontalLayout.addWidget(self.pushButtonMinus)
        self.pushButtonTimes = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonTimes.setFont(font)
        self.pushButtonTimes.setObjectName("pushButtonTimes")
        self.pushButtonTimes.clicked.connect(lambda: self.btn_Press("*"))
        self.horizontalLayout.addWidget(self.pushButtonTimes)
        self.pushButtonDiv = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonDiv.setFont(font)
        self.pushButtonDiv.setObjectName("pushButtonDiv")
        self.pushButtonDiv.clicked.connect(lambda: self.btn_Press("/"))
        self.horizontalLayout.addWidget(self.pushButtonDiv)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButtonPow = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonPow.setFont(font)
        self.pushButtonPow.setObjectName("pushButtonPow")
        self.pushButtonPow.clicked.connect(lambda: self.btn_Press("^"))
        self.horizontalLayout_2.addWidget(self.pushButtonPow)
        self.pushButtonOpenBrack = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonOpenBrack.setFont(font)
        self.pushButtonOpenBrack.setObjectName("pushButtonOpenBrack")
        self.pushButtonOpenBrack.clicked.connect(lambda: self.btn_Press("("))
        self.horizontalLayout_2.addWidget(self.pushButtonOpenBrack)
        self.pushButtonCloseBrack = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonCloseBrack.setFont(font)
        self.pushButtonCloseBrack.setObjectName("pushButtonCloseBrack")
        self.pushButtonCloseBrack.clicked.connect(lambda: self.btn_Press(")"))
        self.horizontalLayout_2.addWidget(self.pushButtonCloseBrack)
        self.pushButtonEq = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonEq.setFont(font)
        self.pushButtonEq.setObjectName("pushButtonEq")
        self.pushButtonEq.clicked.connect(lambda: self.btn_Press("="))
        self.horizontalLayout_2.addWidget(self.pushButtonEq)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.widget1 = QtWidgets.QWidget(parent=Form)
        self.widget1.setGeometry(QtCore.QRect(20, 60, 321, 84))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButtonZero = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonZero.setFont(font)
        self.pushButtonZero.setObjectName("pushButtonZero")
        self.pushButtonZero.clicked.connect(lambda: self.btn_Press("0"))
        self.horizontalLayout_3.addWidget(self.pushButtonZero)
        self.pushButtonOne = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonOne.setFont(font)
        self.pushButtonOne.setObjectName("pushButtonOne")
        self.pushButtonOne.clicked.connect(lambda: self.btn_Press("1"))
        self.horizontalLayout_3.addWidget(self.pushButtonOne)
        self.pushButtonTwo = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonTwo.setFont(font)
        self.pushButtonTwo.setObjectName("pushButtonTwo")
        self.pushButtonTwo.clicked.connect(lambda: self.btn_Press("2"))
        self.horizontalLayout_3.addWidget(self.pushButtonTwo)
        self.pushButtonThree = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonThree.setFont(font)
        self.pushButtonThree.setObjectName("pushButtonThree")
        self.pushButtonThree.clicked.connect(lambda: self.btn_Press("3"))
        self.horizontalLayout_3.addWidget(self.pushButtonThree)
        self.pushButtonFour = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonFour.setFont(font)
        self.pushButtonFour.setObjectName("pushButtonFour")
        self.pushButtonFour.clicked.connect(lambda: self.btn_Press("4"))
        self.horizontalLayout_3.addWidget(self.pushButtonFour)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pushButtonFive = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonFive.setFont(font)
        self.pushButtonFive.setObjectName("pushButtonFive")
        self.pushButtonFive.clicked.connect(lambda: self.btn_Press("5"))
        self.horizontalLayout_4.addWidget(self.pushButtonFive)
        self.pushButtonSix = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonSix.setFont(font)
        self.pushButtonSix.setObjectName("pushButtonSix")
        self.pushButtonSix.clicked.connect(lambda: self.btn_Press("6"))
        self.horizontalLayout_4.addWidget(self.pushButtonSix)
        self.pushButtonSeven = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonSeven.setFont(font)
        self.pushButtonSeven.setObjectName("pushButtonSeven")
        self.pushButtonSeven.clicked.connect(lambda: self.btn_Press("7"))
        self.horizontalLayout_4.addWidget(self.pushButtonSeven)
        self.pushButtonEight = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonEight.setFont(font)
        self.pushButtonEight.setObjectName("pushButtonEight")
        self.pushButtonEight.clicked.connect(lambda: self.btn_Press("8"))
        self.horizontalLayout_4.addWidget(self.pushButtonEight)
        self.pushButtonNine = QtWidgets.QPushButton(parent=self.widget1)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.pushButtonNine.setFont(font)
        self.pushButtonNine.setObjectName("pushButtonNine")
        self.pushButtonNine.clicked.connect(lambda: self.btn_Press("9"))
        self.horizontalLayout_4.addWidget(self.pushButtonNine)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButtonDel.setText(_translate("Form", "DEL"))
        self.pushButtonPlus.setText(_translate("Form", "+"))
        self.pushButtonMinus.setText(_translate("Form", "-"))
        self.pushButtonTimes.setText(_translate("Form", "*"))
        self.pushButtonDiv.setText(_translate("Form", "/"))
        self.pushButtonPow.setText(_translate("Form", "^"))
        self.pushButtonOpenBrack.setText(_translate("Form", "("))
        self.pushButtonCloseBrack.setText(_translate("Form", ")"))
        self.pushButtonEq.setText(_translate("Form", "="))
        self.pushButtonZero.setText(_translate("Form", "0"))
        self.pushButtonOne.setText(_translate("Form", "1"))
        self.pushButtonTwo.setText(_translate("Form", "2"))
        self.pushButtonThree.setText(_translate("Form", "3"))
        self.pushButtonFour.setText(_translate("Form", "4"))
        self.pushButtonFive.setText(_translate("Form", "5"))
        self.pushButtonSix.setText(_translate("Form", "6"))
        self.pushButtonSeven.setText(_translate("Form", "7"))
        self.pushButtonEight.setText(_translate("Form", "8"))
        self.pushButtonNine.setText(_translate("Form", "9"))

    def btn_Press(self, btn):
        text = self.calc_input.text()
        nums = [str(x) for x in range(0,10)]
        print(nums)
        if btn in ["+", "-", "*", "/", "^", "(", ")"] or btn in nums:
            text+=btn
            self.calc_input.setText(text)
        
        elif btn == "=":
            answer = self.evaluate(text)
            self.lcdNumber.display(answer)

        elif btn == "DEL":
            text = text[0:-1]
            self.calc_input.setText(text)

    # Extract tokens from the expression eg: numbers, operators, brackets.
    def tokenize(self, expression):
        tokens = re.findall(r'\d+|[\^*/+\-()]', expression)
        return tokens
    
    # Determine the precedence of the operation (Which one to do first)
    def precedence(self, operator):
        if operator in ('+', '-'):
            return 1
        if operator in ('*', '/'):
            return 2
        if operator == '^':
            return 3
        return 0

    #Do the operation itself
    def apply_operator(self, operands, operator):
        if len(operands) < 2:
            raise InvalidExpressionError("Insufficient operands")
        b = operands.pop()
        a = operands.pop()
        if operator == '+':
            operands.append(a + b)
        elif operator == '-':
            operands.append(a - b)
        elif operator == '*':
            operands.append(a * b)
        elif operator == '/':
            if b == 0:
                raise InvalidExpressionError("Division by zero")
            operands.append(a // b)
        elif operator == '^':
            operands.append(a ** b)
        else:
            raise InvalidExpressionError("Unknown operator")

    def evaluate(self, expression):
        try:
            tokens = self.tokenize(expression)
            if not tokens:
                return "ERR"
            result = self.parse(tokens)
            return result
        except InvalidExpressionError as err:
            return "ERR"
        except Exception:
            return "ERR"

    # Parse through the tokens to understand what operation is being done
    def parse(self, tokens):
        # Parse trough the expression (or sub expression)
        def parse_expression(index, open_parens):
            operands, operators = [], []
            while index < len(tokens):
                token = tokens[index]
                if token.isdigit():
                    operands.append(int(token))
                    index += 1

                # If bracket detected, recursively parse the sub expression to get value inside bracket
                elif token == '(':
                    #keep track of open brackets
                    index, sub_expr, open_parens = parse_expression(index + 1, open_parens + 1)
                    operands.append(sub_expr)

                # Reached end of bracket
                elif token == ')':
                    # Check if the bracket is closing existing open brackets
                    if open_parens == 0:
                        raise InvalidExpressionError("Unmatched closing parenthesis")
                    open_parens -= 1
                    index += 1
                    break
                elif token in '+-*/^':
                    # If operators detected, check if previous operator had higher precedence. If yes, do that operation first.
                    while (operators and self.precedence(operators[-1]) >= self.precedence(token)):
                        self.apply_operator(operands, operators.pop())
                    # Once all operations of higher precedence completed, add current operator to stack
                    operators.append(token)
                    index += 1
                else:
                    raise InvalidExpressionError("Invalid token")
            
            # Once all higher precedence operations have been completed, finish the remaining operations in the stack
            while operators:
                self.apply_operator(operands, operators.pop())
            
            # Once all operations have been finished, it should collapse into the final operand, the answer of the operation. 
            if len(operands) != 1:
                raise InvalidExpressionError("Invalid expression structure")
            
            return index, operands[0], open_parens

        index, result, open_parens = parse_expression(0,0)
        if index != len(tokens) or open_parens != 0:
            raise InvalidExpressionError("Unmatched parenthesis or extra tokens")
        return result


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
